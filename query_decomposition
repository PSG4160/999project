# 필요한 모듈 임포트
from typing import List
import openai

# 질문 분해 함수 정의
def decompose_query(question: str) -> List[str]:
    """
    입력된 질문을 하위 질문들로 분해하는 함수.
    """
    if "지진" in question:
        return [
            "지진 발생 시 즉시 해야 할 일은 무엇인가요?",
            "지진이 끝난 후 안전을 위한 조치는 무엇인가요?"
        ]
    # 추후 다양한 비상 상황 질문들을 처리하기 위해 추가 조건을 설정할 수 있음
    return [question]  # 분해가 불가능한 경우 원래 질문을 반환

# RAG를 위한 검색 함수 정의
def search_using_rag(sub_questions: List[str], knowledge_files: List[str]) -> List[str]:
    """
    각 하위 질문에 대해 RAG를 사용해 검색하고 결과를 반환하는 함수.
    """
    responses = []
    for sub_question in sub_questions:
        found_answer = False
        for file in knowledge_files:
            # 가상의 RAG 검색 함수 호출
            response = openai.File.retrieve(file)  # 실제로는 파일 검색 로직이 필요
            if sub_question in response:
                responses.append(response)
                found_answer = True
                break
        if not found_answer:
            # 파일에서 관련 정보가 없는 경우 일반적인 답변 생성
            responses.append(general_response(sub_question))
    return responses

# 일반적인 답변 생성 함수 정의
def general_response(sub_question: str) -> str:
    """
    RAG에서 관련 정보가 없을 때 일반적인 답변을 생성하는 함수.
    """
    if "지진" in sub_question:
        return "지진이 발생하면 책상 아래로 대피하고, 지진이 멈출 때까지 안전한 곳에 머무르세요."
    return "비상 상황에서 가능한 안전 조치를 취하세요."

# 최종 응답 생성 함수 정의
def generate_final_response(question: str, knowledge_files: List[str]) -> str:
    """
    사용자의 질문을 분해하고, 각 질문에 대해 RAG를 수행한 뒤 최종 응답을 생성하는 함수.
    """
    sub_questions = decompose_query(question)
    sub_responses = search_using_rag(sub_questions, knowledge_files)
    final_response = "\n".join(sub_responses)
    return final_response

# 예제 사용
knowledge_files = ["file1.txt", "file2.txt"]  # 가상의 파일 리스트
question = "지진 발생 시 어떻게 대처해야 하나요?"
final_response = generate_final_response(question, knowledge_files)
print(final_response)  # 최종 응답 출력
